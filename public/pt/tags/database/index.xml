<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database on krismorte</title>
    <link>https://krismorte.github.io/pt/tags/database/</link>
    <description>Recent content in database on krismorte</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 13 Apr 2020 18:55:33 +0000</lastBuildDate><atom:link href="https://krismorte.github.io/pt/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS RDS Backup Strategy</title>
      <link>https://krismorte.github.io/pt/posts/aws-rds-backup-strategy/</link>
      <pubDate>Mon, 13 Apr 2020 18:55:33 +0000</pubDate>
      
      <guid>https://krismorte.github.io/pt/posts/aws-rds-backup-strategy/</guid>
      <description>Esse post vai tratar de uma estratégia de backup e disaster recovery voltado ao AWS RDS feito através de lambdas. Primeiramente vamos falar sobre as snapshots que vem habilitadas por default no RDS é uma solução ao me ver bem robusta com a opção de point-in-time que realiza backups de logs a cada 5 minutos o que permite uma cobertura enorme em casos de falhas. Existem 2 tipos de snapshot automática e manual, as automáticas são feitas diariamente e incrementais durante o decorrer do dia para fornecer o point-in-time elas são mantidas por no máximo 35 dias, e isso não é configurável, já as manuais são feitas por console, cli ou aplicações e não tem data de validade e são limitadas a 100 por instância e região mais esse número pode ser incrementados via chamado com a AWS.</description>
    </item>
    
    <item>
      <title>Documentando bancos com Schemaspy</title>
      <link>https://krismorte.github.io/pt/posts/documenting-databases-with-schemaspy/</link>
      <pubDate>Sun, 12 Apr 2020 18:55:33 +0000</pubDate>
      
      <guid>https://krismorte.github.io/pt/posts/documenting-databases-with-schemaspy/</guid>
      <description>Quando penso em documentação de banco de dados lembro-me de ferramentas centralizadoras onde tudo relacionado ao banco de dado parte do DBA, design, alterar tipo de coluna era necessário abrir um ticket pro DBA e coisas nesse sentido. Num mundo sem migrations e CI\CD fazia muito sentido centralizar tudo na mão do cara especializado, bancos imensos com milhares de tabelas alguns teras de dados e atendendo as vezes mais de um sistema , nos fazia necessário de um ditador benevolente.</description>
    </item>
    
  </channel>
</rss>

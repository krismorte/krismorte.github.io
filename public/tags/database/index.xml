<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database on krismorte</title>
    <link>https://krismorte.github.io/tags/database/</link>
    <description>Recent content in database on krismorte</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 13 Apr 2020 18:55:33 +0000</lastBuildDate><atom:link href="https://krismorte.github.io/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS RDS Backup Strategy</title>
      <link>https://krismorte.github.io/posts/aws-rds-backup-strategy/</link>
      <pubDate>Mon, 13 Apr 2020 18:55:33 +0000</pubDate>
      
      <guid>https://krismorte.github.io/posts/aws-rds-backup-strategy/</guid>
      <description>This post will talk about backup and disaster recovery strategy on AWS RDS been mande by lambdas. First of all let&amp;rsquo;s talk about the default snapshot that comes enable on every RDS and from my sight is a really good solution with its point-in-time option that takes log backups each every 5 minutes which allow us huge coverage on failures. There&amp;rsquo;s 2 types of snapshot automated and manual, automated are taken daily and incremented all day long to delivery the point-in-time solution these snapshot are holding for 35 days max, and this isn&amp;rsquo;t configurable, the manual are made manually, throuth the CLI or by application and there&amp;rsquo;s no expire date and are limited to 100 per instance and region but you can increase this number opening a support ticket with AWS.</description>
    </item>
    
    <item>
      <title>Documenting Databases With Schemaspy</title>
      <link>https://krismorte.github.io/posts/documenting-databases-with-schemaspy/</link>
      <pubDate>Sun, 12 Apr 2020 18:55:25 +0000</pubDate>
      
      <guid>https://krismorte.github.io/posts/documenting-databases-with-schemaspy/</guid>
      <description>When I think about database&amp;rsquo;s documentation remember me of centralizing tools where everything about databases was born on the DBA&amp;rsquo;s hands, design, to chaneg a columntype was needed open a ticket and thing like that. In a world without migrations and CI\CD makes totally sense give that power to the right guy, huge databases with tons of objects and data somethime attend more than one sysmte at time make us need a benevolent dictator.</description>
    </item>
    
  </channel>
</rss>
